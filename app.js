
// BUDGET CONTROLLER
const budgetController = (function(){
    
    let Expense = function(id, description, value){
        this.id = id;
        this.description = description;
        this.value = value;
        this.percentage = -1;
    };

    Expense.prototype.calcPercentage = function(totalIncome){

        totalIncome > 0 ? this.percentage = Math.round( this.value / totalIncome * 100 ) : this.percentage = -1
        
    };

    Expense.prototype.getPercentage = function(){
        return this.percentage;
    }

    let Income = function(id, description, value){
        this.id = id;
        this.description = description;
        this.value = value;
    }

    const data = {
        allItems: {
            exp: [],
            inc: []
        },
        totals: {
            exp: 0,
            inc: 0
        },
        budget: 0,
        percentage: -1
    }

    return {
        addItem: function(type, des, val){
            let newItem, ID;

            // create new id
            if(data.allItems[type].length > 0){
                ID = data.allItems[type][data.allItems[type].length - 1].id + 1;
            } else{
                ID = 0;
            }
           
            // create new item based on type
            if(type === 'exp'){
                newItem = new Expense(ID, des, val);
            } else if (type === 'inc'){
                newItem = new Income(ID, des, val)
            }

            // push it into the data structure
            data.allItems[type].push(newItem);

            // return new element
            return newItem;

        },

        deleteItem: function(type, id) {
            console.log("deleteItem has been invoked");
            console.log("id argument is: " + id);
            let ids, index;

            ids = data.allItems[type].map(function(el) {
                return el.id;
            });
            console.log(ids);

            index = ids.indexOf(id);
            console.log(index);


            if(index !== -1){
                data.allItems[type].splice(index, 1);
            } else {
                console.log("Something went wrong.");
            }

        },

        calculateTotal: function(type){
            let sum = 0;
            data.allItems[type].forEach(function(el){
                sum = sum + el.value;
            });
            data.totals[type] = sum;
        },

        calculatePercentages: function(){
            
            data.allItems.exp.forEach(function(cur){
                cur.calcPercentage(data.totals.inc);
            });

        },

        getPercentages: function(){  
            const allPerc = data.allItems.exp.map(function(cur){
                return cur.getPercentage();
            });
            
            console.log("all percentages generated by 'getPercentages()': " + allPerc);
            return allPerc;
        },

        calculateBudget: function(){
            // calc budget
            this.calculateTotal('exp');
            this.calculateTotal('inc');

            // calculate the budget
            data.budget = data.totals.inc - data.totals.exp;

            // calc perc
            if(data.totals.inc > 0){
                data.percentage = Math.round( ( data.totals.exp / data.totals.inc ) * 100 );
            } else {
                data.percentage = -1;
            }
            
        },

        getBudget: function(){
            return {
                budget: data.budget,
                totalInc: data.totals.inc,
                totalExp: data.totals.exp,
                percentage: data.percentage
            }
        },

        testData: function(){
            console.log(data);
        }
    }

})();


// UI CONTROLLER
const UIController = (function(){
    
    const DOMstrings = {
            inputType: ".add__type",
            inputDescription: ".add__description",
            inputValue: ".add__value",
            inputBtn: ".add__btn",
            incomeContainer: ".income__list",
            expensesContainer: ".expenses__list",
            budgetLabel: '.budget__value',
            incomeLabel: '.budget__income--value',
            expensesLabel: '.budget__expenses--value',
            percentageLabel: '.budget__expenses--percentage',
            container: '.container',
            expensesPercLabel: '.item__percentage',
            dateLabel: '.budget__title--month'
    };

    function formatNumber(num, type){
        let numSplit, int, dec;

        num = Math.abs(num);
        num = num.toFixed(2);

        numSplit = num.split('.');
        int = numSplit[0];
        dec = numSplit[1];	
        
        if(int.length > 3){
            int = int.substr(0, int.length - 3) + ',' + int.substr(int.length - 3, 3);
            return ( ( type === 'exp' ? '- ' : '+ ' ) + int + '.' + dec );
        }

        return ( ( type === 'exp' ? '- ' : '+ ' ) + int + '.' + dec );
        
    };

    function nodeListForEach(list, callback){
        for(let i = 0; i < list.length; i++){
            console.log(list[i]);
            callback(list[i], i);
        }
    };

    return {
        getInput: function(){
            return {
                 type: document.querySelector(DOMstrings.inputType).value, // exp || inc
                 description: document.querySelector(DOMstrings.inputDescription).value,
                 value: parseFloat(document.querySelector(DOMstrings.inputValue).value)
            }
        },

        addListItem: function(obj, type){
            //create HTML string with placeholder text
            let html, newHtml, element;

            if(type === 'inc'){
                element = DOMstrings.incomeContainer;
                html = 
                `
                    <div class="item clearfix" id="inc-%id%">
                        <div class="item__description">%description%</div>
                        <div class="right clearfix">
                            <div class="item__value">%value%</div>
                            <div class="item__delete">
                                <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button>
                            </div>
                        </div>
                    </div>
                `;
            } else if(type === "exp"){
                element = DOMstrings.expensesContainer;
                html = 
                `
                <div class="item clearfix" id="exp-%id%">
                    <div class="item__description">%description%</div>
                    <div class="right clearfix">
                        <div class="item__value">%value%</div>
                        <div class="item__percentage">21%</div>
                        <div class="item__delete">
                            <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button>
                        </div>
                    </div>
                </div>
                `;
            }

            //replace placeholder text with actual data
            newHtml =    html.replace( '%id%', obj.id );
            newHtml = newHtml.replace( '%description%', obj.description );
            newHtml = newHtml.replace( '%value%', formatNumber( obj.value, type ) );

            // insert HTML into the DOM
            document.querySelector(element).insertAdjacentHTML('beforeend', newHtml);

        },

        deleteListItem: function(selectorID){
            const el = document.getElementById(selectorID);
            el.parentNode.removeChild(el);
        },

        clearFields: function(){
            let fields;
            // select fields
            fields = document.querySelectorAll(`${DOMstrings.inputDescription}, ${DOMstrings.inputValue}`);
            // convert fields's list to array
            fieldsArray = Array.prototype.slice.call(fields);
            // reset inputs value's to zero
            fieldsArray.forEach( el => el.value = "" );
            // reset focus
            document.querySelector(DOMstrings.inputDescription).focus();
        },

        displayBudget: function(obj){
            let type;

            obj.budget > 0 ? type = 'inc' : type = 'exp';
            console.log("displayBudget", obj.budget);

            document.querySelector(DOMstrings.budgetLabel).textContent = formatNumber(obj.budget, type);
            document.querySelector(DOMstrings.incomeLabel).textContent = formatNumber(obj.totalInc,'inc');
            document.querySelector(DOMstrings.expensesLabel).textContent = formatNumber(obj.totalExp, 'exp');
            
            if (obj.percentage > 0 ){
                document.querySelector(DOMstrings.percentageLabel).textContent = obj.percentage + "%";
            } else{
                document.querySelector(DOMstrings.percentageLabel).textContent = "---";
            }

        },

        displayPercentages: function(percentages){

            console.log("======= displayPercentages: [percentages, fields] =======")
            console.log(percentages);
            const fields = document.querySelectorAll(DOMstrings.expensesPercLabel);
            console.log(fields)

            nodeListForEach(fields, function(current, index){
                if(percentages.length > 0){
                    current.textContent = percentages[index] + '%';
                    console.log("'nodeListForEach()': something went wrong")
                } else{
                    current.textContent = '---';
                    console.log("'nodeListForEach()': something went wrong")
                }
            });

        },

        displayMonth: function(){
            let now, month, year;
            now = new Date();
            months = ['January', 'February', 'March', 'April', 'May', 'Juni', 'July', 'August', 'September', 'Octoboebr', 'November', 'December'];
            month = now.getMonth();
            year = now.getFullYear();

            document.querySelector(DOMstrings.dateLabel).textContent = year + ' ' + months[month];

        },

        changedType: function(){

            const fields = document.querySelectorAll(
                DOMstrings.inputType + ',' +
                DOMstrings.inputDescription + ',' +
                DOMstrings.inputValue
            );

            nodeListForEach(fields, function(cur){
                cur.classList.toggle('red-focus');
            });

            document.querySelector(DOMstrings.inputBtn).classList.toggle('red');

        },

        getDOMstrings: function(){
            return DOMstrings;
        }
    }

})();



// GLOBAL APP CONTROLLER
const controller = (function(budgetCtrl, UICtrl){
    
    const setupEventListeners = function(){
        const DOM = UICtrl.getDOMstrings();
        document.querySelector(DOM.inputBtn).addEventListener("click", ctrlAddItem);
        document.addEventListener("keypress", function(event){
            if( event.keyCode === 13 || event.which === 13 ){
                ctrlAddItem();
            }
        });

        document.querySelector(DOM.container).addEventListener("click", ctrlDeleteItem);

        document.querySelector(DOM.inputType).addEventListener('change', UICtrl.changedType);

    };

    const updateBudget = function(){

        // calculate budget
        budgetCtrl.calculateBudget();

        // return the budget
        const budget = budgetCtrl.getBudget();
        // display the budget on the UI
        UICtrl.displayBudget(budget);
    };

    const updatePercentages = function(){

        // calc percentages
        budgetCtrl.calculatePercentages();
        // read percentages from the budget controller
        const percentages = budgetCtrl.getPercentages();
        // update the ui with the new percentages
        UICtrl.displayPercentages(percentages);
    };

    const ctrlAddItem = function(){
        let input, newItem;

        // 1.) get data
        input = UICtrl.getInput();

        if( input.description !== "" && !isNaN(input.value) && input.value > 0 ){
            // 2.) add new item to budget controller
            newItem = budgetCtrl.addItem(input.type, input.description, input.value);

            // 3.) clear input fields and reset focus to description input field
            UICtrl.clearFields();

            // 4.) add 2 ui
            UICtrl.addListItem(newItem, input.type);

            // 5.) calculate and update budget
            updateBudget();

            // 6.) calc percentages and update ui
            updatePercentages();

        } else {
            alert("Please do not leave the description field empty and provide a number greater than zero in the value field!");
        }
    };

    const ctrlDeleteItem = function(event){
        
        let itemID, splitID, type, ID;

        itemID = event.target.parentNode.parentNode.parentNode.parentNode.id;


        if (itemID){
            splitID = itemID.split('-');
            type = splitID[0];
            ID = parseInt(splitID[1]);
            console.log(ID);
        }

        // 1. delete the item from the data structrure
        budgetCtrl.deleteItem(type, ID);

        // 2. delete the item from the UI
        UICtrl.deleteListItem(itemID);

        // 3. Update and show the new budget
        updateBudget();

    };

    return {
        init: function(){
            console.log("The application has successfully started...");
            UICtrl.displayMonth();
            UICtrl.displayBudget({
                budget: 0,
                totalInc: 0,
                totalExp: 0,
                percentage: -1
            });
            setupEventListeners();
        }
    }

})(budgetController, UIController);

controller.init();